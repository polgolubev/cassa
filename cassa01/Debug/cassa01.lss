
cassa01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000082  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000108  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000043a  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003a1  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000253  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000278  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:

int main(void)
{
    unsigned char buttonpress=0;
	unsigned char i;
	DDRB = 0b00001110;
  22:	8e e0       	ldi	r24, 0x0E	; 14
  24:	87 bb       	out	0x17, r24	; 23
	PORTB = 0b00000011;
  26:	83 e0       	ldi	r24, 0x03	; 3
  28:	88 bb       	out	0x18, r24	; 24
#include <util/delay.h>


int main(void)
{
    unsigned char buttonpress=0;
  2a:	90 e0       	ldi	r25, 0x00	; 0
			{
				buttonpress--;
			} 
			else
			{
				PORTB = 0b00000011;				
  2c:	33 e0       	ldi	r19, 0x03	; 3
			{
				buttonpress++;
			} 
			else
			{
				PORTB = 0b00001100;
  2e:	5c e0       	ldi	r21, 0x0C	; 12
				_delay_ms(2000);
				for (i=0;i < 9; i++)
				{
					PORTB = 0b00000100;
  30:	24 e0       	ldi	r18, 0x04	; 4
					_delay_ms(1000);
				}				
				PORTB = 0b00000101;
  32:	45 e0       	ldi	r20, 0x05	; 5
	unsigned char i;
	DDRB = 0b00001110;
	PORTB = 0b00000011;
    while (1) 
    {
		if (!(PINB&0b00000001))
  34:	b0 99       	sbic	0x16, 0	; 22
  36:	1d c0       	rjmp	.+58     	; 0x72 <__SREG__+0x33>
		{
			if (buttonpress<5)
  38:	95 30       	cpi	r25, 0x05	; 5
  3a:	10 f4       	brcc	.+4      	; 0x40 <__SREG__+0x1>
			{
				buttonpress++;
  3c:	9f 5f       	subi	r25, 0xFF	; 255
  3e:	fa cf       	rjmp	.-12     	; 0x34 <main+0x12>
			} 
			else
			{
				PORTB = 0b00001100;
  40:	58 bb       	out	0x18, r21	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  42:	6f ef       	ldi	r22, 0xFF	; 255
  44:	72 e5       	ldi	r23, 0x52	; 82
  46:	87 e0       	ldi	r24, 0x07	; 7
  48:	61 50       	subi	r22, 0x01	; 1
  4a:	70 40       	sbci	r23, 0x00	; 0
  4c:	80 40       	sbci	r24, 0x00	; 0
  4e:	e1 f7       	brne	.-8      	; 0x48 <__SREG__+0x9>
  50:	00 c0       	rjmp	.+0      	; 0x52 <__SREG__+0x13>
  52:	00 00       	nop
  54:	89 e0       	ldi	r24, 0x09	; 9
				_delay_ms(2000);
				for (i=0;i < 9; i++)
				{
					PORTB = 0b00000100;
  56:	28 bb       	out	0x18, r18	; 24
  58:	ef e7       	ldi	r30, 0x7F	; 127
  5a:	69 ea       	ldi	r22, 0xA9	; 169
  5c:	73 e0       	ldi	r23, 0x03	; 3
  5e:	e1 50       	subi	r30, 0x01	; 1
  60:	60 40       	sbci	r22, 0x00	; 0
  62:	70 40       	sbci	r23, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
  6a:	81 50       	subi	r24, 0x01	; 1
			} 
			else
			{
				PORTB = 0b00001100;
				_delay_ms(2000);
				for (i=0;i < 9; i++)
  6c:	a1 f7       	brne	.-24     	; 0x56 <__SREG__+0x17>
				{
					PORTB = 0b00000100;
					_delay_ms(1000);
				}				
				PORTB = 0b00000101;
  6e:	48 bb       	out	0x18, r20	; 24
  70:	e1 cf       	rjmp	.-62     	; 0x34 <main+0x12>
			}
		} 
		else
		{
			if (buttonpress>0)
  72:	99 23       	and	r25, r25
  74:	11 f0       	breq	.+4      	; 0x7a <__SREG__+0x3b>
			{
				buttonpress--;
  76:	91 50       	subi	r25, 0x01	; 1
  78:	dd cf       	rjmp	.-70     	; 0x34 <main+0x12>
			} 
			else
			{
				PORTB = 0b00000011;				
  7a:	38 bb       	out	0x18, r19	; 24
  7c:	db cf       	rjmp	.-74     	; 0x34 <main+0x12>

0000007e <_exit>:
  7e:	f8 94       	cli

00000080 <__stop_program>:
  80:	ff cf       	rjmp	.-2      	; 0x80 <__stop_program>
